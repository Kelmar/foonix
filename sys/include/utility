/********************************************************************************************************************/

/********************************************************************************************************************/

#ifndef _X_UTILITY
#define _X_UTILITY 1

#include <type_traits>

/********************************************************************************************************************/

namespace std
{
    template <class T>
    typename std::remove_reference<T>::type&& move(T&& t) noexcept 
    {
        typedef typename remove_reference<T>::type _up;
        return static_cast<_up&&>(t);
    }

    template <class T>
    inline void swap(T &x, T &y) noexcept
    {
        T tmp = std::move(x);
        x = std::move(y);
        y = std::move(tmp);
    }
}

/********************************************************************************************************************/

#endif /* _X_UTILITY */

/********************************************************************************************************************/
